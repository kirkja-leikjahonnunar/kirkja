[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://b0urdil7tcis5"]

[ext_resource type="Texture2D" uid="uid://s84kvfo1odi1" path="res://Core/PlayerController/Materials/flare.png" id="1_53mx2"]

[sub_resource type="Shader" id="Shader_uw8au"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.alpha12's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
//uniform float point_size : hint_range(0,128);
//uniform float roughness : hint_range(0,1);
//uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
//uniform vec4 metallic_texture_channel;
//uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
//uniform float specular;
//uniform float metallic;
//uniform vec3 uv1_scale;
//uniform vec3 uv1_offset;
//uniform vec3 uv2_scale;
//uniform vec3 uv2_offset;


void vertex() {
	//UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	//MODELVIEW_MATRIX = VIEW_MATRIX * mat4(INV_VIEW_MATRIX[0], INV_VIEW_MATRIX[1], INV_VIEW_MATRIX[2], MODEL_MATRIX[3]);
	//MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0), vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0), vec4(0.0, 0.0, 0.0, 1.0));
}


void fragment() {
	vec2 base_uv = 2.0*(UV - vec2(.5,.5));
	float angle = TIME;
	vec2 uv1 = (.9 + .1 * sin(TIME)) * vec2(base_uv.x * cos(angle) + base_uv.y * sin(angle), base_uv.x * sin(angle) - base_uv.y * cos(angle));
	vec2 uv2 = vec2(base_uv.x * cos(-angle) + base_uv.y * sin(-angle), base_uv.x * sin(-angle) - base_uv.y * cos(-angle));
	uv1 = (uv1 + vec2(1.0, 1.0))/2.0;
	uv2 = (uv2 + vec2(1.0, 1.0))/2.0;
	vec4 albedo_tex1 = texture(texture_albedo,uv1);
	vec4 albedo_tex2 = texture(texture_albedo,uv2);
	vec4 albedo_tex = albedo_tex1 * albedo_tex2;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALPHA *= albedo.a * albedo_tex.a;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_uw8au")
shader_param/albedo = Color(1, 1, 1, 1)
shader_param/texture_albedo = ExtResource("1_53mx2")
